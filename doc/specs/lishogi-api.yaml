openapi: "3.1.0"
info:
  version: 1.0.0
  title: Lishogi.org API reference
  contact:
    name: "Lishogi.org API"
    url: "https://lishogi.org/api"
    email: "contact@lishogi.org"
  x-logo:
    url: https://lishogi.org/assets/piece/king-logo.svg
    backgroundColor: #ffffff
  license:
    name: AGPL-3.0-or-later
    url: https://www.gnu.org/licenses/agpl-3.0.txt
  description: |
    # Introduction
    Welcome to the reference for the Lishogi API! Lishogi is a free/libre,
    open-source draughts server powered by volunteers and donations.
    - Get help by email at [contact@lishogi.org](mailto:contact@lishogi.org).
    - [Contribute to this documentation on Github](https://github.com/lishogi-org/api).
    - Check out [lishogi widgets to embed in your website](https://lishogi.org/developers).

    ## Endpoint
    All requests go to `https://lishogi.org` (unless otherwise specified).

    ## Rate limiting
    All requests are rate limited using various strategies,
    to ensure the API remains responsive for everyone.
    Only make one request at a time.
    If you receive an HTTP response with a [429 status](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#429),
    please wait a full minute before resuming API usage.

    ## Streaming with ND-JSON
    Some API endpoints stream their responses as [Newline Delimited JSON a.k.a. **nd-json**](http://ndjson.org/), with one JSON object per line.

    Here's a [JavaScript utility function](https://gist.github.com/ornicar/a097406810939cf7be1df8ea30e94f3e) to help reading NDJSON streamed responses.

    ## Authentication
    ### Personal Access Token
    Personal API access tokens allow you to quickly interact with Lishogi API without going through an OAuth flow.
    - [Generate a personal access token](https://lishogi.org/account/oauth/token)
    - `curl https://lishogi.org/api/account -H "Authorization: Bearer {token}"`
servers:
  - url: https://lishogi.org
tags:
- name: Account
  description: |
    Read and write account informations and preferences.
    https://lishogi.org/account/preferences/game-display
- name: Users
  description: |
    Access registered users on Lishogi.
    https://lishogi.org/player
- name: Relations
  description: |
    Access relations between users.
- name: Games
  description: |
    Access games played on Lishogi.
    https://lishogi.org/games
- name: Teams
  description: |
    Access and manage Lishogi teams and their members.
    https://lishogi.org/team
- name: Bot
  description: "Play on Lishogi as a bot. Allows engine play.\n
  \ Only works with [Bot accounts](#operation/botAccountUpgrade).\n\n\
  \n### Features\n\
  \ - [Stream incoming draughts moves](#operation/botGameStream)\n\
  \ - [Play draughts moves](#operation/botGameMove)\n\
  \ - [Read](#operation/botGameStream) and [write](#operation/botGameChat) in the player and spectator chats\n\
  \ - [Receive](#operation/apiStreamEvent), [create](#operation/challengeCreate) and [accept](#operation/challengeAccept) (or [decline](#operation/challengeDecline)) challenges\n\
  \ - [Abort](#operation/botGameAbort) and [resign](#operation/botGameResign) games\n\
  \ - Engine assistance is allowed\n\
  \n### Restrictions\n\
  \ - Bots can only play challenge games: lobby and tournaments are off-limits\n\
  \n### Integrations\n\
  \ None as of yet. Let us know if you have made a working bot client!"
- name: Challenges
  description: |
    Send and receive challenges to play.
- name: Arena tournaments
  description: |
    Access Arena tournaments played on Lishogi.
    [Official Arena tournaments](https://lishogi.org/tournament) are maintained by Lishogi,
    but you can [create your own Arena tournaments](https://lishogi.org/tournament/new) as well.
- name: Simuls
  description: |
    Access simuls played on Lishogi.
    https://lishogi.org/simul
- name: Studies
  description: |
    Access Lishogi studies.
    https://lishogi.org/study
- name: OAuth
  description: |
    Requests taking advantage of OAuth authentication.
    https://lishogi.org/account/oauth/app
paths:
  /api/users/status:
    get:
      operationId: apiUsersStatus
      summary: Get real-time users status
      description: |
        Read the `online`, `playing` and `streaming` flags of several users.

        This API is very fast and cheap on lishogi side.
        So you can call it quite often (like once every 5 seconds).

        Use it to track players and know when they're connected on lishogi and playing games.
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: query
          name: ids
          required: true
          description: User IDs separated by commas. Up to 50 IDs.
          schema:
            type: string
          example: aliquantus,draughts10x10
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                      nullable: true
                    online:
                      type: boolean
                      nullable: true
                    playing:
                      type: boolean
                      nullable: true
                    streaming:
                      type: boolean
                      nullable: true
                    patron:
                      type: boolean
                      nullable: true
                example: [
                  {
                    "id": "aliquantus",
                    "name": "Aliquantus"
                  },
                  {
                    "id": "draughts10x10",
                    "name": "Draughts10x10",
                    "title": "MN",
                    "online": true,
                    "playing": true,
                    "streaming": true,
                    "patron": true
                  }
                ]

  /player:
    get:
      operationId: player
      summary: Get all top 10
      tags:
        - Users
      security:
        - SameOrigin: []
      description: |
        Get the top 10 players for each speed and variant.

        See https://lishogi.org/player.
      parameters:
        - $ref: '#/components/parameters/lishogi'
      responses:
        200:
          content:
            application/vnd.lishogi.v3+json:
              schema:
                $ref: '#/components/schemas/Top10s'

  /player/top/{nb}/{perfType}:
    get:
      operationId: playerTopNbPerfType
      summary: Get one leaderboard
      tags:
        - Users
      security:
        - SameOrigin: []
      description: |
        Get the leaderboard for a single speed or variant (a.k.a. `perfType`).
        There is no leaderboard for correspondence or puzzles.

        See https://lishogi.org/player/top/200/bullet.
      parameters:
        - $ref: '#/components/parameters/lishogi'
        - in: path
          name: nb
          description: How many users to fetch
          schema:
            type: integer
            minimum: 1
            maximum: 200
            example: 100
          required: true
        - in: path
          name: perfType
          description: The speed or variant
          schema:
            type: string
            example: bullet
            enum:
              - ultraBullet
              - bullet
              - blitz
              - rapid
              - classical
              - frisian
              - frysk
              - antidraughts
              - breakthrough
              - russian
              - brazilian
          required: true
      responses:
        200:
          content:
            application/vnd.lishogi.v3+json:
              schema:
                $ref: '#/components/schemas/Leaderboard'

  /api/user/{username}:
    get:
      operationId: apiUser
      summary: Get user public data
      description: |
        Read public data of a user.
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/user/{username}/rating-history:
    get:
      operationId: apiUserRatingHistory
      summary: Get rating history of a user
      description: |
        Read rating history of a user, for all perf types.
        There is at most one entry per day.
        Format of an entry is `[year, month, day, rating]`.
        `month` starts at zero (January).
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingHistory'

  /api/user/{username}/activity:
    get:
      operationId: apiUserActivity
      summary: Get user activity
      description: |
        Read data to generate the activity feed of a user.
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActivity'

  /api/users:
    post:
      operationId: apiUsers
      summary: Get users by ID
      tags:
        - Users
      security:
        - None: []
      description: |
        Get up to 300 users by their IDs. Users are returned in the order same order as the IDs.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      requestBody:
        description: User IDs separated by commas.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "george,player2,player3"
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/account:
    get:
      operationId: accountMe
      summary: Get my profile
      description: |
        Public informations about the logged in user.
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: []
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/account/email:
    get:
      operationId: accountEmail
      summary: Get my email address
      description: |
        Read the email address of the logged in user.
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["email:read"]
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                example:
                  email: abathur@mail.org

  /api/account/preferences:
    get:
      operationId: account
      summary: Get my preferences
      description: |
        Read the preferences of the logged in user.

        - https://lishogi.org/account/preferences/game-display
        - https://github.com/roepstoep/lishogi/blob/master/modules/pref/src/main/Pref.scala
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:read"]
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  prefs:
                    $ref: '#/components/schemas/UserPreferences'

  /api/account/kid:
    get:
      operationId: accountKid
      summary: Get my kid mode status
      description: |
        Read the kid mode status of the logged in user.

        - https://lishogi.org/account/kid
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:read"]
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  kid:
                    type: boolean
                example:
                  kid: false
    post:
      operationId: accountKidPost
      summary: Set my kid mode status
      description: |
        Set the kid mode status of the logged in user.

        - https://lishogi.org/account/kid
      tags:
        - Account
        - OAuth
      security:
        - OAuth2: ["preference:write"]
      parameters:
        - in: query
          name: v
          required: true
          description: Kid mode status
          schema:
            type: boolean
          example: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /game/export/{gameId}:
    get:
      operationId: gamePdn
      summary: Export one game
      description: |
        Download one game in either PDN or JSON format.

        Ongoing games have their last 3 moves omitted, after move 5.
      tags:
        - Games
      security:
        - None: []
      parameters:
        - in: path
          name: gameId
          description: The game ID (8 characters).
          required: true
          schema:
            type: string
        - in: query
          name: moves
          description: Include the PDN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PDN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PDN moves, when available.

            Example: `3. 16x27 {[%clock w0:01:59 B0:01:59]} 18-22 {[%clock W0:01:59 b0:01:58]}`
          schema:
            type: boolean
            default: true
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PDN, when available.

            Example: `7. 28x19 {[%eval 0.5]} 14x23 {[%eval 0.52]}`
          schema:
            type: boolean
            default: true
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "Chefneux Opening"]`
          schema:
            type: boolean
            default: true
        - in: query
          name: literate
          description: |
            Insert textual annotations in the PDN about the opening, analysis variations, mistakes, and game termination.

            Example: `9... 20-24?! {(0.14 → 0.87) Inaccuracy. Best move was 20-25.}  (9... 20-25 10. 35-30 25x23 11. 31-27 10-14 12. 45-40 5-10)`
          schema:
            type: boolean
            default: false
        - in: query
          name: algebraic
          description: |
            Use algebraic notation (a-h, 1-8) for the PDN moves of 64-variants (8x8 board).

            Example: `1. c3-d4 f6-e5 2. d4xf6 g7xe5 3. a3-b4 h8-g7`
          schema:
            type: boolean
            default: true
      responses:
        200:
          content:
            application/x-draughts-pdn:
              schema:
                $ref: '#/components/schemas/GamePdn'
            application/json:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/games/user/{username}:
    get:
      operationId: apiGamesUser
      summary: Export games of a user
      description: |
        Download all games of any user in PDN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.

        Games are sorted by reverse chronological order (most recent first)

        We recommend streaming the response, for it can be very long (thousands of games).

        The game stream is throttled, depending on who is making the request:
          - Anonymous request: 10 games per second
          - [OAuth2 authenticated](#section/Authentication) request: 20 games per second
          - Authenticated, downloading your own games: 50 games per second
      tags:
        - Games
        - OAuth
      security:
        - None: []
        - OAuth2: []
      parameters:
        - in: path
          name: username
          description: The user name.
          schema:
            type: string
          required: true
        - in: query
          name: since
          description: Download games played since this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Account creation date
        - in: query
          name: until
          description: Download games played until this timestamp.
          schema:
            type: integer
            minimum: 1356998400070
            default: Now
        - in: query
          name: max
          description: How many games to download. Leave empty to download all games.
          schema:
            type: integer
            minimum: 1
            default: null
        - in: query
          name: vs
          description: "[Filter] Only games played against this opponent"
          schema:
            type: string
        - in: query
          name: rated
          description: "[Filter] Only rated (`true`) or casual (`false`) games"
          schema:
            type: boolean
            default: null
        - in: query
          name: perfType
          description: "[Filter] Only games in these speeds or variants.\n
          \nMultiple perf types can be specified, separated by a comma.\n
          \nExample: blitz,rapid,classical"
          schema:
            type: string
            default: null
            enum:
              - ultraBullet
              - bullet
              - blitz
              - rapid
              - classical
              - correspondence
              - frisian
              - frysk
              - antidraughts
              - breakthrough
              - russian
              - brazilian
        - in: query
          name: color
          description: "[Filter] Only games played as this color."
          schema:
            type: string
            default: null
            enum:
              - white
              - black
        - in: query
          name: analysed
          description: "[Filter] Only games with or without a computer analysis available"
          schema:
            type: boolean
            default: null
        - in: query
          name: ongoing
          description: "[Filter] Also include ongoing games"
          schema:
            type: boolean
            default: false
        - in: query
          name: moves
          description: Include the PDN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PDN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PDN moves, when available.

            Example: `3. 16x27 {[%clock w0:01:59 B0:01:59]} 18-22 {[%clock W0:01:59 b0:01:58]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PDN, when available.

            Example: `7. 28x19 {[%eval 0.5]} 14x23 {[%eval 0.52]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "Chefneux Opening"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: algebraic
          description: |
            Use algebraic notation (a-h, 1-8) for the PDN moves of 64-variants (8x8 board).

            Example: `1. c3-d4 f6-e5 2. d4xf6 g7xe5 3. a3-b4 h8-g7`
          schema:
            type: boolean
            default: true
      responses:
        200:
          content:
            application/x-draughts-pdn:
              schema:
                $ref: '#/components/schemas/GamePdn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /games/export/_ids:
    post:
      operationId: gamesExportIds
      summary: Export games by IDs
      description: |
        Download games by IDs in PDN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request Accept header.

        Games are sorted by reverse chronological order (most recent first)

        The method is `POST` so a longer list of IDs can be sent in the request body.

        300 IDs can be submitted.

        Ongoing games have their last 3 moves omitted, after move 5.
      tags:
        - Games
      security:
        - SameOrigin: []
      requestBody:
        description: Game IDs separated by commas. Up to 300.
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: "6LzvpHRX,dgUNP3ZY,IEg7zZC3"
      parameters:
        - in: query
          name: moves
          description: Include the PDN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PDN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PDN moves, when available.

            Example: `3. 16x27 {[%clock w0:01:59 B0:01:59]} 18-22 {[%clock W0:01:59 b0:01:58]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PDN, when available.

            Example: `7. 28x19 {[%eval 0.5]} 14x23 {[%eval 0.52]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "Chefneux Opening"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: algebraic
          description: |
            Use algebraic notation (a-h, 1-8) for the PDN moves of 64-variants (8x8 board).

            Example: `1. c3-d4 f6-e5 2. d4xf6 g7xe5 3. a3-b4 h8-g7`
          schema:
            type: boolean
            default: true
      responses:
        200:
          content:
            application/x-draughts-pdn:
              schema:
                $ref: '#/components/schemas/GamePdn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/stream/games-by-users:
    post:
      operationId: gamesByUsers
      summary: Stream games of users
      description: |
        Stream the games played between a list of users, in real time.
        Only games where **both players** are part of the list are included.

        Games are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).

        Maximum number of users: 300.

        The method is `POST` so a longer list of IDs can be sent in the request body.
      tags:
        - Games
      security:
        - None: []
      requestBody:
        description: |
          Up to 300 user IDs separated by commas.
          Example: `george,player1,player2`
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                example: {"id":"6LzvpHdX","rated":true,"variant":"standard","speed":"bullet","perf":"bullet","createdAt":1525789431889,"status":20,"clock":{"initial":60,"increment":0,"totalTime":60},"players":{"white":{"userId":"player1","rating":2617},"black":{"userId":"player2","rating":2288}}}

  /api/account/playing:
    get:
      operationId: apiAccountPlaying
      summary: Get ongoing games
      description: |
        Get the ongoing games of the current user.
        Real-time and correspondence games are included.
        The most urgent games are listed first.
      tags:
        - Games
        - OAuth
      security:
        - OAuth2: []
      parameters:
        - in: query
          name: nb
          description: Max number of games to fetch
          schema:
            type: integer
            default: 9
            minimum: 1
            maximum: 50
      responses:
        200:
          content:
            application/json:
              schema:
                example: {"nowPlaying":[{"fullId":"PkTf16FgfewE","gameId":"PkTf16Fg","fen":"W27,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50:B1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,24","color":"white","lastMove":"1319","variant":{"key":"frisian","name":"Frisian","board":{"key":"100","size":[10,10]}},"speed":"blitz","perf":"frisian","rated":false,"opponent":{"id":null,"username":"Anon."},"isMyTurn":true,"secondsLeft":254}]}

  /tv/feed:
    get:
      operationId: tvFeed
      summary: Stream current TV game
      description: |
        Stream positions and moves of the current [TV game](https://lishogi.org/tv) in [ndjson](#section/Introduction/Streaming-with-ND-JSON) format.
        A summary of the game is sent as a first message, and when the featured game changes.

        Try it with `curl https://lishogi.org/tv/feed`.
      tags:
        - Games
      security:
        - SameOrigin: []
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                example:
                  {"t":"featured","d":{"id":"PkTf16Fg","orientation":"black","players":[{"color":"white","user":{"name":"Player1","id":"player1","title":"GMI"},"rating":2531},{"color":"black","user":{"name":"Player2","title":"MN","id":"player2"},"rating":2594}],"fen":"W27,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50:B1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,24"}}

  /api/tournament:
    get:
      operationId: apiTournament
      summary: Get current tournaments
      description: |
        Get recently finished, ongoing, and upcoming tournaments.

        This API is used to display the [Lishogi tournament schedule](https://lishogi.org/tournament).
      tags:
        - "Arena tournaments"
      security:
        - None: []
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournaments'
    post:
      operationId: apiTournamentPost
      summary: Create a new Arena tournament
      description: |
        Create a public or private Arena tournament.

        This endpoint mirrors the form on https://lishogi.org/tournament/new.

        You can create up to 12 public tournaments per day, or 24 private tournaments.

        A team battle can be created by specifying the `teambBattleByTeam` argument.

        Additional restrictions:
          - clockTime + clockIncrement > 0
          - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name.
                clockTime:
                  type: number
                  description: Clock initial time in minutes
                  example: 2
                  minimum: 0
                  maximum: 60
                  default: 2
                  enum:
                    - 0
                    - 0.25
                    - 0.5
                    - 0.75
                    - 1
                    - 1.5
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 8
                    - 10
                    - 15
                    - 20
                    - 25
                    - 30
                    - 40
                    - 50
                    - 60
                clockIncrement:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  minimum: 0
                  maximum: 60
                  default: 0
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 10
                    - 15
                    - 20
                    - 25
                    - 30
                    - 40
                    - 50
                    - 60
                minutes:
                  type: integer
                  description: How long the tournament lasts, in minutes
                  example: 60
                  minimum: 0
                  maximum: 360
                  default: 45
                  enum:
                    - 20
                    - 25
                    - 30
                    - 35
                    - 40
                    - 45
                    - 50
                    - 55
                    - 60
                    - 70
                    - 80
                    - 90
                    - 100
                    - 110
                    - 120
                    - 150
                    - 180
                    - 210
                    - 240
                    - 270
                    - 300
                    - 330
                    - 360
                waitMinutes:
                  type: integer
                  description: How long to wait before starting the tournament, from now, in minutes
                  minimum: 0
                  maximum: 360
                  default: 5
                  enum:
                    - 1
                    - 2
                    - 3
                    - 5
                    - 10
                    - 15
                    - 20
                    - 30
                    - 45
                    - 60
                startDate:
                  type: integer
                  description: Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting.
                variant:
                  type: string
                  description: The variant to use in tournament games
                  enum:
                    - standard
                    - frisian
                    - frysk
                    - antidraughts
                    - breakthrough
                    - russian
                    - brazilian
                  default: standard
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                berserkable:
                  type: boolean
                  description: Whether the players can use berserk
                  default: true
                streakable:
                  type: boolean
                  description: After 2 wins, consecutive wins grant 4 points instead of 2
                  default: true
                hasChat:
                  type: boolean
                  description: Whether the players can discuss in a chat
                  default: true
                description:
                  type: string
                  description: Anything you want to tell players about the tournament. Markdown links are available.
                password:
                  type: string
                  description: Make the tournament private, and restrict access with a password
                teamBattleByTeam:
                  type: string
                  description: |
                    Set the ID of a team you lead to create a team battle.
                    The other teams can be added using the [team battle edit endpoint](#operation/apiTournamentTeamBattlePost).
                conditions.teamMember.teamId:
                  type: string
                  description: |
                    Restrict entry to members of a team.

                    The teamId is the last part of a team URL, e.g. https://lishogi.org/team/lichess has teamId = `lichess`.

                    Leave empty to let everyone join the tournament.

                    Do not use this to create team battles, use `teamBattleByTeam` instead.
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                  enum: [1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600]
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                  enum: [2200, 2100, 2000, 1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1000]
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
                  enum: [0, 5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200]
              required:
                - clockTime
                - clockIncrement
                - minutes
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/{id}:
    parameters:
     - in: path
       name: id
       description: The tournament ID.
       schema:
         type: string
       required: true
    get:
      operationId: tournament
      summary: Get info about an Arena tournament
      description: |
        Get detailed info about recently finished, current, or upcoming tournament's duels, player standings, and other info.
      tags:
        - "Arena tournaments"
      security: []
      parameters:
        - in: query
          name: page
          description: Specify which page of player standings to view.
          schema:
            type: number
            example: 1
            default: 1
            minimum: 1
            maximum: 200
      responses:
        200:
          description: The information of the Arena tournament.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
    post:
      operationId: apiTournamentUpdate
      summary: Update an Arena tournament
      description: |
        Update an Arena tournament.

        Ongoing tournaments can no longer be updated.

        Can be used to update a team battle.

        Additional restrictions:
          - clockTime + clockIncrement > 0
          - Clock time in comparison to tournament length must be reasonable: 3 <= (minutes * 60) / (96 * clockTime + 48 * clockIncrement + 15) <= 150
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      requestBody:
        description: Parameters of the tournament
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The tournament name. Leave empty to get a random Grandmaster name
                  minLength: 2
                  maxLength: 30
                clockTime:
                  type: number
                  description: Clock initial time in minutes
                  example: 2
                  enum:
                    - 0
                    - 0.25
                    - 0.5
                    - 0.75
                    - 1
                    - 1.5
                    - 2
                    - 3
                    - 4
                    - 5
                    - 6
                    - 7
                    - 8
                    - 10
                    - 15
                    - 20
                    - 25
                    - 30
                    - 40
                    - 50
                    - 60
                clockIncrement:
                  type: integer
                  description: Clock increment in seconds
                  example: 1
                  enum: [0, 1, 2, 3, 4, 5, 6, 7, 10, 15, 20, 25, 30, 40, 50, 60]
                minutes:
                  type: integer
                  description: How long the tournament lasts, in minutes
                  example: 60
                  enum: [20, 25, 30, 35, 40, 45, 50, 55, 60, 70, 80, 90, 100, 110, 120, 150, 180, 210, 240, 270, 300, 330, 360]
                waitMinutes:
                  type: integer
                  description: How long to wait before starting the tournament, from now, in minutes
                  default: 5
                  enum: [1, 2, 3, 5, 10, 15, 20, 30, 45, 60]
                startDate:
                  type: integer
                  description: Timestamp (in milliseconds) to start the tournament at a given date and time. Overrides the `waitMinutes` setting
                variant:
                  type: string
                  description: The variant to use in tournament games
                  enum:
                    - standard
                    - frisian
                    - frysk
                    - antidraughts
                    - breakthrough
                    - russian
                    - brazilian
                  default: standard
                rated:
                  type: boolean
                  description: Games are rated and impact players ratings
                  default: true
                berserkable:
                  type: boolean
                  description: Whether the players can use berserk.
                  default: true
                streakable:
                  type: boolean
                  description: After 2 wins, consecutive wins grant 4 points instead of 2
                  default: true
                hasChat:
                  type: boolean
                  description: Whether the players can discuss in a chat
                  default: true
                description:
                  type: string
                  description: Anything you want to tell players about the tournament
                password:
                  type: string
                  description: Make the tournament private, and restrict access with a password
                conditions.teamMember.teamId:
                  type: string
                  description: |
                    Restrict entry to members of a team.

                    The teamId is the last part of a team URL, e.g. https://lishogi.org/team/lichess has teamId = `lichess`.
                conditions.minRating.rating:
                  type: integer
                  description: Minimum rating to join. Leave empty to let everyone join the tournament.
                  enum: [1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600]
                conditions.maxRating.rating:
                  type: integer
                  description: Maximum rating to join. Based on best rating reached in the last 7 days. Leave empty to let everyone join the tournament.
                  enum: [2200, 2100, 2000, 1900, 1800, 1700, 1600, 1500, 1400, 1300, 1200, 1000]
                conditions.nbRatedGame.nb:
                  type: integer
                  description: Minimum number of rated games required to join.
                  enum: [0, 5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200]
              required:
                - clockTime
                - clockIncrement
                - minutes
      responses:
        "200":
          description: The Arena tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
        "400":
          description: The update of the Arena tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/{id}/terminate:
    post:
      operationId: apiTournamentTerminate
      summary: Terminate an Arena tournament
      description: |
        Terminate an Arena tournament
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
            example: "hL7vMrFQ"
          required: true
      responses:
        "200":
          description: The tournament was successfully terminated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        "400":
          description: Terminating the tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/team-battle/{id}:
    post:
      operationId: apiTournamentTeamBattlePost
      summary: Update a team battle
      description: |
        Set the teams and number of leaders of a team battle.
        To update the other attributes of a team battle, use the [tournament update endpoint](#operation/apiTournamentUpdate).
      tags:
        - "Arena tournaments"
      security:
        - OAuth2: ["tournament:write"]
      parameters:
        - in: path
          name: id
          description: The tournament ID (8 characters)..
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                teams:
                  type: string
                  description: |
                    All team IDs of the team battle, separated by commas.
                    Make sure to always send the full list.
                    Teams that are not in the list will be removed from the team battle.
                    Example: `lichess,professional-frisian-players,wfd`
                nbLeaders:
                  type: integer
                  description: Number team leaders per team.
              required:
                - teams
                - nbLeaders
      responses:
        200:
          description: The team battle tournament was successfully updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArenaTournament'
        400:
          description: The update of the team battle tournament failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/tournament/{id}/games:
    get:
      operationId: gamesByTournament
      summary: Export games of an Arena tournament
      description: |
        Download games of a tournament in PDN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request Accept header.

        Games are sorted by reverse chronological order (most recent first)
      tags:
        - "Arena tournaments"
      security:
        - None: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: moves
          description: Include the PDN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PDN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PDN moves, when available.

            Example: `3. 16x27 {[%clock w0:01:59 B0:01:59]} 18-22 {[%clock W0:01:59 b0:01:58]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PDN, when available.

            Example: `7. 28x19 {[%eval 0.5]} 14x23 {[%eval 0.52]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "Chefneux Opening"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: algebraic
          description: |
            Use algebraic notation (a-h, 1-8) for the PDN moves of 64-variants (8x8 board).

            Example: `1. c3-d4 f6-e5 2. d4xf6 g7xe5 3. a3-b4 h8-g7`
          schema:
            type: boolean
            default: true
      responses:
        200:
          content:
            application/x-draughts-pdn:
              schema:
                $ref: '#/components/schemas/GamePdn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/tournament/{id}/results:
    get:
      operationId: resultsByTournament
      summary: Get results of an Arena tournament
      description: |
        Players of an Arena tournament, with their score and performance, sorted by rank (best first).

        **Players are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON)**, i.e. one JSON object per line.

        If called on an ongoing tournament, results can be inconsistent
        due to ranking changes while the players are being streamed.
        Use on finished tournaments for guaranteed consistency.
      tags:
        - "Arena tournaments"
      security:
        - None: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
        - in: query
          name: nb
          description: Max number of players to fetch
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                example: {"rank":4,"score":389,"rating":2618,"username":"george","title":"MI","performance":2423,"team":"lichess"}

  /api/tournament/{id}/teams:
    get:
      operationId: teamsByTournament
      summary: Get team standing of a team battle
      description: |
        Teams of a team battle tournament, with top players, sorted by rank (best first).
      tags:
        - "Arena tournaments"
      security:
        - None: []
      parameters:
        - in: path
          name: id
          description: The tournament ID.
          schema:
            type: string
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                example: {"id":"CdPg1ey4","teams":[{"rank":1,"id":"cat-lovers","score":842,"players":[{"user":{"name":"lizen69","id":"lizen69"},"score":54},{"user":{"name":"lizen249","id":"lizen249"}}]}]}

  /api/user/{username}/tournament/created:
    get:
      operationId: apiUserNameTournamentCreated
      summary: Get tournaments created by a user
      description: |
        Get all tournaments created by a given user.

        Tournaments are sorted by reverse chronological order of start date (last starting first).

        Tournaments are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - "Arena tournaments"
      security:
        - None: []
      parameters:
        - in: query
          name: nb
          description: Max number of tournaments to fetch
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/ArenaTournament'

  /study/{studyId}/{chapterId}.pdn:
    get:
      operationId: studyChapterPdn
      summary: Export one study chapter
      description: |
        Download one study chapter in PDN format.
      tags:
        - Studies
      security:
        - SameOrigin: []
      parameters:
        - in: path
          name: studyId
          description: The study ID (8 characters).
          required: true
          schema:
            type: string
        - in: path
          name: chapterId
          description: The chapter ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/x-draughts-pdn:
              schema:
                $ref: '#/components/schemas/StudyPdn'

  /study/{studyId}.pdn:
    get:
      operationId: studyChapterPdn
      summary: Export all chapters
      description: |
        Download all chapters of a study in PDN format.
      tags:
        - Studies
      security:
        - SameOrigin: []
      parameters:
        - in: path
          name: studyId
          description: The study ID (8 characters).
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/x-draughts-pdn:
              schema:
                $ref: '#/components/schemas/StudyPdn'

  /api/simul:
    get:
      operationId: apiSimul
      summary: Get current simuls
      description: |
        Get recently finished, ongoing, and upcoming simuls.
      tags:
        - Simuls
      security:
        - None: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Simul'

  /api/simul/{id}/games:
    get:
      operationId: gamesBySimul
      summary: Export games of a simul
      description: |
        Download games of a simul in PDN or [ndjson](#section/Introduction/Streaming-with-ND-JSON) format, depending on the request Accept header.
      tags:
        - Simuls
      security:
        - None: []
      parameters:
        - in: path
          name: id
          description: The simul ID.
          schema:
            type: string
          required: true
        - in: query
          name: moves
          description: Include the PDN moves.
          schema:
            type: boolean
            default: true
        - in: query
          name: tags
          description: Include the PDN tags.
          schema:
            type: boolean
            default: true
        - in: query
          name: clocks
          description: |
            Include clock comments in the PDN moves, when available.

            Example: `3. 16x27 {[%clock w0:01:59 B0:01:59]} 18-22 {[%clock W0:01:59 b0:01:58]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: evals
          description: |
            Include analysis evaluation comments in the PDN, when available.

            Example: `7. 28x19 {[%eval 0.5]} 14x23 {[%eval 0.52]}`
          schema:
            type: boolean
            default: false
        - in: query
          name: opening
          description: |
            Include the opening name.

            Example: `[Opening "Chefneux Opening"]`
          schema:
            type: boolean
            default: false
        - in: query
          name: algebraic
          description: |
            Use algebraic notation (a-h, 1-8) for the PDN moves of 64-variants (8x8 board).

            Example: `1. c3-d4 f6-e5 2. d4xf6 g7xe5 3. a3-b4 h8-g7`
          schema:
            type: boolean
            default: true
      responses:
        200:
          content:
            application/x-draughts-pdn:
              schema:
                $ref: '#/components/schemas/GamePdn'
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/GameJson'

  /api/team/{teamId}:
    get:
      operationId: teamShow
      summary: Get a single team
      description: Infos about a team
      tags:
        - Teams
      security: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The information about the team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /api/team/all:
    get:
      operationId: teamAll
      summary: Get popular teams
      description: |
        Paginator of the most popular teams.
      tags:
        - Teams
      security: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            example: 1
            default: 1
      responses:
        "200":
          description: A paginated list of the most popular teams.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPaginatorJson'

  /api/team/of/{username}:
    get:
      operationId: teamOfUsername
      summary: Teams of a player
      description: |
        All the teams a player is a member of.
      tags:
        - Teams
      security: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "roepstoep"
          required: true
      responses:
        "200":
          description: The list of teams the user is a member of.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'

  /api/team/search:
    get:
      operationId: teamSearch
      summary: Search teams
      description: |
        Paginator of team search results for a keyword.
      tags:
        - Teams
      security: []
      parameters:
        - in: query
          name: text
          schema:
            type: string
            example: coders
        - in: query
          name: page
          schema:
            type: number
            example: 1
            default: 1
      responses:
        "200":
          description: The paginated list of teams.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPaginatorJson'

  /api/team/{teamId}/users:
    get:
      operationId: teamIdUsers
      summary: Get members of a team
      description: |
        Members are sorted by reverse chronological order of joining the team (most recent first).
        OAuth is only required if the list of members is private.

        Members are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Users
        - Teams
      security:
        - OAuth2: ["team:read"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "coders"
          required: true
      responses:
        "200":
          description: The list of users in the team.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
                default: "'*'"
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /team/{teamId}/join:
    post:
      operationId: teamIdJoin
      summary: Join a team
      description: |
        Join a team.
        If the team join policy requires a confirmation but the
        `message` parameter is not given, then the call fails with
        `403 Forbidden`.
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
          SameOrigin: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "lichess"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Optional request message, if the team requires one.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /team/{teamId}/quit:
    post:
      operationId: teamIdQuit
      summary: Leave a team
      description: |
        Leave a team.
        - https://lishogi.org/team
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
          SameOrigin: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "lichess"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /team/{teamId}/kick/{userId}:
    post:
      operationId: teamIdKickUserId
      summary: Kick a user from your team
      description: |
        Kick a member out of one of your teams.
        - https://lishogi.org/team
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
          SameOrigin: []
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "lichess"
          required: true
        - in: path
          name: userId
          schema:
            type: string
            example: "neio"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'

  /team/{teamId}/pm-all:
    post:
      operationId: teamIdPmAll
      summary: Message all members
      description: |
        Send a private message to all members of a team.
        You must own the team.
      tags:
        - Teams
        - OAuth
      security:
        - OAuth2: ["team:write"]
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            example: "lichess"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The message to send to all your team members.
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /streamer/live:
    get:
      operationId: streamerLive
      summary: Get live streamers
      description: |
        Get basic info about currently streaming users.

        This API is very fast and cheap on lishogi side.
        So you can call it quite often (like once every 5 seconds).
      tags:
        - Users
      security:
        - None: []
          SameOrigin: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    title:
                      type: string
                      nullable: true
                    playing:
                      type: boolean
                      nullable: true
                    patron:
                      type: boolean
                      nullable: true
                example: [
                  {
                    "id": "player1",
                    "name": "Player1"
                  },
                  {
                    "id": "player2",
                    "name": "Player2",
                    "title": "MN",
                    "playing": true,
                    "patron": true
                  }
                ]

  /api/crosstable/{user1}/{user2}:
    get:
      operationId: apiCrosstable
      summary: Get crosstable
      description: |
        Get total number of games, and current score, of any two users.

        If the `matchup` flag is provided, and the users are currently playing, also gets the current match game number and scores.
      tags:
        - Users
      security:
        - None: []
      parameters:
        - in: path
          name: user1
          schema:
            type: string
          required: true
        - in: path
          name: user2
          schema:
            type: string
          required: true
        - in: query
          name: matchup
          description: Whether to get the current match data, if any
          schema:
            type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Crosstable'

  /api/user/{username}/following:
    get:
      operationId: apiUserFollowing
      summary: Get users followed by a user
      description: |
        Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Relations
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "george"
          required: true
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/user/{username}/followers:
    get:
      operationId: apiUserFollowers
      summary: Get users who follow a user
      description: |
        Users are streamed as [ndjson](#section/Introduction/Streaming-with-ND-JSON).
      tags:
        - Relations
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "george"
          required: true
      responses:
        200:
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/UserExtended'

  /api/stream/event:
    get:
      operationId: apiStreamEvent
      summary: Stream incoming events
      description: "\n
      \ Stream the events reaching a lishogi user in real time as [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\n
      \ Each line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameStart` Start of a game\n
      \ - `challenge` A player sends you a challenge\n
      \n
      \ When the stream opens, all current challenges and games are sent."
      tags:
        - Bot
        - Challenges
      security:
        - OAuth2: ["challenge:read", "bot:play"]
      responses:
        200:
          content:
            text/plain:
              example: |
                {"type":"challenge","challenge":{"id":"7aGLxJ4F","status":"created","challenger":{"id":"george","name":"George","title":"MI","rating":2506,"patron":true,"online":true,"lag":24},"destUser":{"id":"player1","name":"Player1","title":null,"rating":1500,"provisional":true,"online":true,"lag":45},"variant":{"key":"standard","name":"Standard","short":"Std"},"rated":true,"timeControl":{"type":"clock","limit":300,"increment":25,"show":"5+25"},"color":"random","perf":{"icon":"#","name":"Rapid"}}}
                {"type":"gameStart","game":{"id":"16svP42l"}}

  /api/bot/account/upgrade:
    post:
      operationId: botAccountUpgrade
      summary: Upgrade to Bot account
      description: |
        Upgrade a lishogi player account into a Bot account. Only Bot accounts can use the Bot API.

        The account **cannot have played any game** before becoming a Bot account. The upgrade is **irreversible**. The account will only be able to play as a Bot.

        To know if an account has already been upgraded, use the [Get my profile API](#operation/accountMe):
        the `title` field should be set to `BOT`.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/stream/{gameId}:
    get:
      operationId: botGameStream
      summary: Stream Bot game state
      description: "\
      \ Stream the state of a game being played with the Bot API, as [ndjson](#section/Introduction/Streaming-with-ND-JSON).\n\
      \nUse this endpoint to get updates about the game in real-time, with a single request.\n\
      \nEach line is a JSON object containing a `type` field. Possible values are:\n
      \ - `gameFull` Full game data. All values are immutable, except for the `state` field.\n
      \ - `gameState` Current state of the game. Immutable values not included.\n
      \ - `chatLine` Chat message sent by a user (or the bot itself) in the `room` \"player\" or \"spectator\".\n\n
      \nThe first line is always of type `gameFull`."
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotGameState'

  /api/bot/game/{gameId}/move/{move}:
    post:
      operationId: botGameMove
      summary: Make a Bot move
      description: |
        Make a move in a game being played with the Bot API.

        The move can also contain a draw offer/agreement.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
        - in: path
          name: move
          required: true
          description: The move to play, only square numbers (e.g. 3227 or 3425)
          schema:
            type: string
            example: "3227"
        - in: query
          name: offeringDraw
          description: Whether to offer (or agree to) a draw
          schema:
            type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/chat:
    post:
      operationId: botGameChat
      summary: Write in the chat
      description: |
        Post a message to the player or spectator chat, in a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                room:
                  type: string
                  enum:
                  - player
                  - spectator
                text:
                  type: string
                  example: "Thank you for the game!"
              required:
                - room
                - text
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/abort:
    post:
      operationId: botGameAbort
      summary: Abort a game
      description: |
        Abort a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/bot/game/{gameId}/resign:
    post:
      operationId: botGameResign
      summary: Resign a game
      description: |
        Resign a game being played with the Bot API.
      tags:
        - Bot
      security:
        - OAuth2: ["bot:play"]
      parameters:
        - in: path
          name: gameId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/challenge/{username}:
    post:
      operationId: challengeCreate
      summary: Create a challenge
      description: |
        Challenge someone to play. The targeted player can choose to accept or decline.

        If the challenge is accepted, you will be notified on the [event stream](#operation/apiStreamEvent)
        that a new game has started. The game ID will be the same as the challenge ID.

        If you also have an OAuth token with `challenge:write` scope for the receiving user,
        you can make them accept the challenge immediately by setting the `acceptByToken` field.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play"]
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "george"
          required: true
      requestBody:
        description: Parameters of the challenge
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings.
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 180
                days:
                  type: integer
                  description: Days per move, for correspondence games. Clock settings must be omitted.
                  example: 5
                  minimum: 1
                  maximum: 14
                color:
                  type: string
                  description: Which color you get to play
                  enum:
                    - random
                    - white
                    - black
                  default: 'random'
                variant:
                  type: string
                  description: The variant of the game
                  enum:
                    - standard
                    - frisian
                    - frysk
                    - antidraughts
                    - breakthrough
                    - russian
                    - brazilian
                  default: standard
                fen:
                  type: string
                  description: Custom initial position (FEN). Both algebraic coordinates and fieldnumbers are supported. Variant must be standard, russian or brazilian. The game cannot be rated, unless it is a micro-match.
                microMatch:
                  type: boolean
                  description: Makes this challenge a micro-match. A rematch with colors reversed will be played immediately after the first game is finished. Only possble when starting from a custom initial position.
                  default: false
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeJson'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/challenge/{challengeId}/accept:
    post:
      operationId: challengeAccept
      summary: Accept a challenge
      description: |
        Accept an incoming challenge.

        You should receive a `gameStart` event on the [incoming events stream](#operation/apiStreamEvent).
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/challenge/{challengeId}/decline:
    post:
      operationId: challengeDecline
      summary: Decline a challenge
      description: |
        Decline an incoming challenge.
      tags:
        - Challenges
      security:
        - OAuth2: ["challenge:write", "bot:play"]
      parameters:
        - in: path
          name: challengeId
          schema:
            type: string
            example: "5IrD6Gzz"
          required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ok'
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /api/challenge/external/{username}:
    post:
      operationId: challengeExternal
      summary: Create an external challenge
      description: |
        Create a challenge between any two players. The targeted players get the choice to join when they visit the challenge url. If both players have joined the game starts.
        
        Optionally a starting date/time can be specified. The challenge page shows a countdown until the specified date/time is reached. Only then do the players get the option to join.

        Players don't get notified when you create an external challenge for them. The only way to find the challenge after it is created is by visiting the url that is returned in the Json.
      tags:
        - Challenges
      security:
        - None: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
            example: "george"
          required: true
      requestBody:
        description: Parameters of the challenge
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                opponent:
                  type: string
                  required: true
                  description: Username of the second player.
                rated:
                  type: boolean
                  description: Game is rated and impacts players ratings.
                'clock.limit':
                  type: number
                  description: Clock initial time in seconds. If empty, a correspondence game is created.
                  example: 300
                  minimum: 0
                  maximum: 10800
                'clock.increment':
                  type: integer
                  description: Clock increment in seconds. If empty, a correspondence game is created.
                  example: 1
                  minimum: 0
                  maximum: 180
                days:
                  type: integer
                  description: Days per move, for correspondence games. Clock settings must be omitted.
                  example: 5
                  minimum: 1
                  maximum: 14
                color:
                  type: string
                  description: Which color the user specified in the url gets to play.
                  enum:
                    - random
                    - white
                    - black
                  default: 'random'
                variant:
                  type: string
                  description: The variant of the game
                  enum:
                    - standard
                    - frisian
                    - frysk
                    - antidraughts
                    - breakthrough
                    - russian
                    - brazilian
                  default: standard
                fen:
                  type: string
                  description: Custom initial position (FEN). Both algebraic coordinates and fieldnumbers are supported. Variant must be standard, russian or brazilian. The game cannot be rated, unless it is a micro-match.
                microMatch:
                  type: boolean
                  description: Makes this challenge a micro-match. A rematch with colors reversed will be played immediately after the first game is finished. Only possble when starting from a custom initial position.
                  default: false
                startsAt:
                  type: integer
                  description: |
                    Optional. Timestamp in milliseconds when the challenge becomes available to join.

                    Example: `1617274800000`
                  example: 1617274800000
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalChallengeJson'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  parameters:
    lishogi:
      in: header
      name: Accept
      schema:
        type: string
        default: application/vnd.lishogi.v3+json
      required: true
  schemas:
    Clock:
      type: object
      properties:
        limit:
          type: integer
        increment:
          type: integer

    ChallengeJson:
      example: {
        "id": "VU0nyvsW",
        "url": "https://lishogi.org/VU0nyvsW",
        "color": "random",
        "direction": "out",
        "timeControl": {
          "increment": 2,
          "limit": 300,
          "show": "5+2",
          "type": "clock"
        },
        "variant": {
          "key": "standard",
          "name": "Standard",
          "short": "Std"
        },
        "challenger": {
          "id": "george",
          "name": "George",
          "online": true,
          "provisional": false,
          "rating": 1940,
          "title": "MN"
        },
        "destUser": {
          "id": "player1",
          "name": "Player1",
          "online": true,
          "provisional": true,
          "rating": 2670,
          "title": "GMI"
        },
        "perf": {
          "icon": ";",
          "name": "Blitz"
        },
        "rated": true,
        "speed": "blitz",
        "status": "created"
      }

    ExternalChallengeJson:
      example: {
        "id": "5v3Omry5",
        "url": "https://lishogi.org/5v3Omry5",
        "status": "external",
        "challenger": {
          "id": "bumperballooncars",
          "name": "BumperBalloonCars",
          "title": null,
          "rating": 2008,
          "patron": true
        },
        "destUser": {
          "id": "george",
          "name": "George",
          "title": null,
          "rating": 1633
        },
        "variant": {
          "key": "standard",
          "name": "Standard",
          "short": "Std"
        },
        "rated": true,
        "speed": "bullet",
        "timeControl": {
          "type": "clock",
          "limit": 60,
          "increment": 0,
          "show": "1+0"
        },
        "color": "random",
        "perf": {
          "icon": "T",
          "name": "Bullet"
        },
        "external": true,
        "startsAt": 1619434800000
      }

    BulkPairing:
      example: {
        "id": "RVAcwgg7",
        "games": [
            {
                "id": "NKop9IyD",
                "black": "lizen1",
                "white": "thibault"
            },
            {
                "id": "KT8374ut",
                "black": "lizen3",
                "white": "lizen2"
            },
            {
                "id": "wInQr8Sk",
                "black": "lizen5",
                "white": "lizen4"
            }
        ],
        "variant": "standard",
        "clock": {
            "increment": 0,
            "limit": 300
        },
        "pairAt": 1612289869919,
        "pairedAt": null,
        "rated": false,
        "startClocksAt": 1612200422971,
        "scheduledAt": 1612203514628
    }

    BulksPairing:
      example: {
        "bulks": [
            {
                "id": "RVAcwgg7",
                "games": [
                    {
                        "id": "NKop9IyD",
                        "black": "lizen1",
                        "white": "thibault"
                    },
                    {
                        "id": "KT8374ut",
                        "black": "lizen3",
                        "white": "lizen2"
                    },
                    {
                        "id": "wInQr8Sk",
                        "black": "lizen5",
                        "white": "lizen4"
                    }
                ],
                "variant": "standard",
                "clock": {
                    "increment": 0,
                    "limit": 300
                },
                "pairAt": 1612289869919,
                "pairedAt": null,
                "rated": false,
                "startClocksAt": 1612200422971,
                "scheduledAt": 1612203514628
            }
        ]
    }

    GameJson:
      example: {
        "id": "bG6TAsXm",
        "rated": true,
        "variant": "standard",
        "speed": "blitz",
        "perf": "blitz",
        "createdAt": 1572047951353,
        "lastMoveAt": 1572048247866,
        "status": "resign",
        "players": {
          "white": {
            "user": {
              "id": "bumperballooncars",
              "name": "BumperBalloonCars",
              "patron": true
            },
            "rating": 1839,
            "ratingDiff": 3
          },
          "black": {
            "user": {
              "id": "roepstoep",
              "name": "RoepStoep",
              "patron": true
            },
            "rating": 1448,
            "ratingDiff": -3
          }
        },
        "winner": "white",
        "moves": "32-28 18-23 34-29 23x34 40x29 12-18 44-40 7-12 50-44 1-7 37-32 17-22 28x17 11x22 41-37 7-11 46-41 20-25 31-26 19-23 37-31 23x34 40x29 14-19 32-27 10-14 41-37 5-10 44-40 14-20 29-24 20x29 33x24 19x30 35x24 10-14 38-33 14-20 43-38 20x29 33x24 9-14 39-33 4-9 40-34 14-19 34-29 19x30 29-23 18x29 27x18 18x7 8-12 33x24 24x35",
        "clock": {
          "initial": 300,
          "increment": 0,
          "totalTime": 300
        }
      }

    GamePdn:
      example: |
        [Event "Rated Blitz game"]
        [Site "https://lishogi.org/bG6TAsXm"]
        [Date "2019.10.25"]
        [Round "-"]
        [White "BumperBalloonCars"]
        [Black "RoepStoep"]
        [Result "2-0"]
        [UTCDate "2019.10.25"]
        [UTCTime "23:59:11"]
        [WhiteElo "1839"]
        [BlackElo "1448"]
        [WhiteRatingDiff "+3"]
        [BlackRatingDiff "-3"]
        [GameType "20"]
        [TimeControl "300+0"]
        [Opening "?"]
        [Termination "Normal"]

        1. 32-28 {[%clock w0:05:00 B0:05:00]} 18-23 {[%clock W0:05:00 b0:05:00]} 2. 34-29 {[%clock w0:04:58 B0:05:00]} 23x34 {[%clock W0:04:58 b0:04:58]} 3. 40x29 {[%clock w0:04:57 B0:04:58]} 12-18 {[%clock W0:04:57 b0:04:55]} 4. 44-40 {[%clock w0:04:56 B0:04:55]} 7-12 {[%clock W0:04:56 b0:04:54]} 5. 50-44 {[%clock w0:04:56 B0:04:54]} 1-7 {[%clock W0:04:56 b0:04:52]} 6. 37-32 {[%clock w0:04:55 B0:04:52]} 17-22 {[%clock W0:04:55 b0:04:50]} 7. 28x17 {[%clock w0:04:54 B0:04:50]} 11x22 {[%clock W0:04:54 b0:04:49]} 8. 41-37 {[%clock w0:04:54 B0:04:49]} 7-11 {[%clock W0:04:54 b0:04:46]} 9. 46-41 {[%clock w0:04:53 B0:04:46]} 20-25 {[%clock W0:04:53 b0:04:42]} 10. 31-26 {[%clock w0:04:51 B0:04:42]} 19-23 {[%clock W0:04:51 b0:04:27]} 11. 37-31 {[%clock w0:04:46 B0:04:27]} 23x34 {[%clock W0:04:46 b0:04:20]} 12. 40x29 {[%clock w0:04:46 B0:04:20]} 14-19 {[%clock W0:04:46 b0:04:18]} 13. 32-27 {[%clock w0:04:31 B0:04:18]} 10-14 {[%clock W0:04:31 b0:03:55]} 14. 41-37 {[%clock w0:04:15 B0:03:55]} 5-10 {[%clock W0:04:15 b0:03:47]} 15. 44-40 {[%clock w0:04:10 B0:03:47]} 14-20 {[%clock W0:04:10 b0:03:46]} 16. 29-24 {[%clock w0:03:50 B0:03:46]} 20x29 {[%clock W0:03:50 b0:03:23]} 17. 33x24 {[%clock w0:03:49 B0:03:23]} 19x30 {[%clock W0:03:49 b0:03:21]} 18. 35x24 {[%clock w0:03:49 B0:03:21]} 10-14 {[%clock W0:03:49 b0:03:20]} 19. 38-33 {[%clock w0:03:43 B0:03:20]} 14-20 {[%clock W0:03:43 b0:03:17]} 20. 43-38 {[%clock w0:03:32 B0:03:17]} 20x29 {[%clock W0:03:32 b0:03:14]} 21. 33x24 {[%clock w0:03:32 B0:03:14]} 9-14 {[%clock W0:03:32 b0:03:12]} 22. 39-33 {[%clock w0:03:27 B0:03:12]} 4-9 {[%clock W0:03:27 b0:03:08]} 23. 40-34 {[%clock w0:03:03 B0:03:08]} 14-19 {[%clock W0:03:03 b0:03:06]} 24. 34-29 {[%clock w0:02:57 B0:03:06]} 19x30 {[%clock W0:02:57 b0:03:04]} 25. 29-23 {[%clock w0:02:57 B0:03:04]} 18x29 {[%clock W0:02:57 b0:02:36]} 26. 27x7 {[%clock w0:02:41 B0:02:36]} 8-12 {[%clock W0:02:41 b0:02:31]} 27. 33x35 {[%clock w0:02:39 B0:02:31]} 2-0
    StudyPdn:
      example: |
        [Event "Draughts Openings 🎓✅: Chefneux Opening"]
        [Site "https://lishogi.org/study/kLSsfEV4/5O0wPcfq"]
        [Result "*"]
        [UTCDate "2018.08.15"]
        [UTCTime "18:33:47"]
        [GameType "20"]
        [Opening "?"]
        [Annotator "https://lishogi.org/@/Unknown182"]

        { [%csl R28,G23][%cal R3228,G1823] }
        1. 32-28 {[%csl R28,G23][%cal R3228,G1823]} 1... 18-23 {[%csl G23,R28][%cal G1823,R3228]} 2. 38-32 (2. 33-29 23x32 3. 37x28)  (2. 37-32?? {[%csl R37]} 2... 23-29!! {This is the infamous Harlem Shot of the Chefneux Opening, probably the oldest "trap" in all of draughts. White continued developing its left-wing but left a hole that can be inmediately exploited by the following combination:} {[%csl R37]} 3. 34x23 {[%csl R37,R26]} (3. 33x24 {[%csl R37]} 3... 20x29 {[%csl R26,R37]} 4. 34x23 $7 {[%csl R26,R37]} 4... 17-22 {[%csl R26,R37]} 5. 28x17 $7 {[%csl R28,R37,R26][%cal R1928,R2837,R3726]} 5... 19x26 {[%csl R28,R37,R26][%cal R1928,R2837,R3726]}) 3... 17-22 {[%csl R37,R26]} 4. 28x17 $7 {[%csl R28,R37,R26][%cal R1928,R2837,R3726]} 4... 19x26 $17) 2... 12-18 *

    Title:
      type: string
      enum: [GMI, MI, MF, GMN, MN, cMN, GMIF, MIF, MFF, MNF, cMNF, GMI-64, MI-64, MF-64, GMN-64, MN-64, cMN-64, GMIF-64, MIF-64, MFF-64, MNF-64, cMNF-64, LM, BOT]
      example: MN

    LightUser:
      type: object
      properties:
        name:
          type: string
          example: "George"
        title:
          $ref: '#/components/schemas/Title'
        patron:
          type: boolean
          example: true
        id:
          type: string
          example: "george"

    Perf:
      type: object
      properties:
        games:
          type: integer
          example: 2945
        rating:
          type: integer
          example: 1609
        rd:
          type: integer
          example: 60
        prog:
          type: integer
          example: -22
        prov:
          type: boolean

    Perfs:
      type: object
      properties:
        frisian:
          $ref: '#/components/schemas/Perf'
        frysk:
          $ref: '#/components/schemas/Perf'
        antidraughts:
          $ref: '#/components/schemas/Perf'
        breakthrough:
          $ref: '#/components/schemas/Perf'
        russian:
          $ref: '#/components/schemas/Perf'
        brazilian:
          $ref: '#/components/schemas/Perf'
        ultraBullet:
          $ref: '#/components/schemas/Perf'
        bullet:
          $ref: '#/components/schemas/Perf'
        blitz:
          $ref: '#/components/schemas/Perf'
        rapid:
          $ref: '#/components/schemas/Perf'
        classical:
          $ref: '#/components/schemas/Perf'
        correspondence:
          $ref: '#/components/schemas/Perf'
        puzzle:
          $ref: '#/components/schemas/Perf'
        puzzlefrisian:
          $ref: '#/components/schemas/Perf'
        puzzlerussian:
          $ref: '#/components/schemas/Perf'

    PlayTime:
      type: object
      properties:
        total:
          type: integer
          example: 3296897
        tv:
          type: integer
          example: 12134

    Profile:
      type: object
      properties:
        country:
          type: string
          example: NL
        location:
          type: string
        bio:
          type: string
          example: Little Green Bag
        firstName:
          type: string
          example: George
        lastName:
          type: string
          example: Baker
        fmjdRating:
          type: integer
          example: 1500
        kndbRating:
          type: integer
          example: 1500
        links:
          type: string
          example: "https://en.wikipedia.org/wiki/George_Baker_(Dutch_singer)"

    Count:
      type: object
      properties:
        all:
          type: integer
          example: 9265
        rated:
          type: integer
          example: 7157
        ai:
          type: integer
          example: 531
        draw:
          type: integer
          example: 340
        drawH:
          type: integer
          example: 331
        loss:
          type: integer
          example: 4480
        lossH:
          type: integer
          example: 4207
        win:
          type: integer
          example: 4440
        winH:
          type: integer
          example: 4378
        bookmark:
          type: integer
          example: 71
        playing:
          type: integer
          example: 6
        import:
          type: integer
          example: 66
        me:
          type: integer
          example: 0

    User:
      type: object
      properties:
        id:
          type: string
          example: george
        username:
          type: string
          example: George
        online:
          type: boolean
          example: true
        perfs:
          $ref: '#/components/schemas/Perfs'
        createdAt:
          type: integer
          example: 1290415680000
        disabled:
          type: boolean
          example: false
        engine:
          type: boolean
          example: false
        booster:
          type: boolean
          example: false
        profile:
          $ref: '#/components/schemas/Profile'
        seenAt:
          type: integer
          example: 1522636452014
        patron:
          type: boolean
          example: true
        playTime:
          $ref: '#/components/schemas/PlayTime'
        language:
          type: string
          example: en-GB
        title:
          $ref: '#/components/schemas/Title'

    UserExtended:
      allOf:
        - $ref: '#/components/schemas/User'
        - properties:
            url:
              type: string
              format: uri
              example: https://lishogi.org/@/george
            playing:
              type: string
              format: uri
              example: https://lishogi.org/6LzvpHRX/black
            nbFollowing:
              type: integer
              example: 299
            nbFollowers:
              type: integer
              example: 2735
            completionRate:
              type: integer
              example: 97
            count:
              $ref: '#/components/schemas/Count'
            streaming:
              type: boolean
              example: false
            followable:
              type: boolean
              example: true
            following:
              type: boolean
              example: false
            blocking:
              type: boolean
              example: false
            followsYou:
              type: boolean
              example: false

    Crosstable:
      example: {
        "users": {
          "player1": 201.5,
          "player2": 144.5
        },
        "nbGames": 346,
        "matchup": {
          "users": {
            "player1": 44,
            "player2": 43
            },
            "nbGames":87
          }
        }

    PuzzleRoundJson:
      example: {
        "id": 70232,
        "date": 1514505150384,
        "rating": 1982,
        "ratingDiff": 5,
        "puzzleRating": 1877
      }

    PuzzleDashboardJson:
      example: {
        "days": 30,
        "global": {
          "firstWins": 276,
          "nb": 501,
          "performance": 1570,
          "puzzleRatingAvg": 1523,
          "replayWins": 2
        },
        "themes": {
          "advancedPawn": {
            "results": {
              "firstWins": 19,
              "nb": 39,
              "performance": 1438,
              "puzzleRatingAvg": 1476,
              "replayWins": 1
            },
            "theme": "Advanced pawn"
          },
          "anastasiaMate": {
            "results": {
              "firstWins": 5,
              "nb": 6,
              "performance": 1720,
              "puzzleRatingAvg": 1387,
              "replayWins": 0
            },
            "theme": "Anastasia's mate"
          }
        }
      }

    RatingHistory:
      example: [{"name":"Bullet","points":[[2011,0,8,1472],[2011,0,9,1332],[2011,8,12,1314]]},{"name":"Blitz","points":[[2011,7,29,1332]]}]

    UserActivity:
      example: [
        {
          "interval": {
            "start": 1613088000,
            "end": 1613174400 
          },
          "correspondenceMoves": {
            "nb": 1,
            "games": [
              {
                "id": "6LzvpHRX",
                "color": "white",
                "url":"/6LzvpHRX/white",
                "opponent": {
                  "user": "player1",
                  "rating": 1375
                }
              }
            ]
          },
          "correspondenceEnds": {
            "score": {
              "win": 1,
              "loss": 0,
              "draw": 0,
              "rp": {
                "before": 1975,
                "after": 1976
              }
            },
            "games": [
              {
                "id": "6LzvpHRX",
                "color": "black",
                "url": "/6LzvpHRX/black",
                "opponent": {
                  "user": "player2",
                  "rating": 1475
                }
              }
            ]
          },
          "posts": [
            {
              "topicUrl": "/forum/lishogi-feedback/example-topic",
              "topicName": "Example topic",
              "posts": [
                {
                  "url": "/forum/redirect/post/gavekoEr",
                  "text":"Example post"
                }
              ]
            }
          ],
          "follows": {
            "in": {
              "ids": [
                "player1",
                "player2"
              ]
            },
            "out": {
              "ids": [
                "player3"
              ]
            }
          }
        }
      ]

    Top10s:
      example: {
        "bullet": [
          {
            "id": "player1",
            "username": "Player1",
            "perfs": {
              "bullet": {
                "rating": 3018,
                "progress": 18
              }
            },
            "online": true,
            "title": "MF"
          },
          {
            "id": "player2",
            "username": "Player2",
            "perfs": {
              "bullet": {
                "rating": 2983,
                "progress": -36
              }
            },
            "title": "GMI",
            "online": true,
            "patron": true
          },
          {
            "id": "player3",
            "username": "Player3",
            "perfs": {
              "bullet": {
                "rating": 2958,
                "progress": 35
              }
            },
            "title": "cMN"
          },
        ],
        "blitz": [],
        "rapid": [],
        "classical": [],
        "ultraBullet": [],
        "frisian": [],
        "frysk": [],
        "antidraughts": [],
        "breakthrough": [],
        "russian": [],
        "brazilian": []
      }

    Leaderboard:
      example: {
        "users": [
          {
            "id": "player1",
            "username": "Player1",
            "perfs": {
              "bullet": {
                "rating": 3018,
                "progress": 18
              }
            },
            "online": true,
            "title": "MF"
          },
          {
            "id": "player2",
            "username": "player2",
            "perfs": {
              "bullet": {
                "rating": 2983,
                "progress": -36
              }
            },
            "title": "GMI",
            "online": true,
            "patron": true
          },
          {
            "id": "player3",
            "username": "Player3",
            "perfs": {
              "bullet": {
                "rating": 2958,
                "progress": 35
              }
            },
            "title": "GMI"
          },
        ]
      }

    UserPreferences:
      type: object
      properties:
        dark:
          type: boolean
          example: true
        transp:
          type: boolean
          example: false
        bgImg:
          type: string
          format: uri
        theme:
          type: string
          enum:
            - blue
            - blue2
            - blue3
            - canvas
            - wood
            - wood2
            - wood3
            - maple
            - green
            - marble
            - brown
            - brown2
            - leather
            - match
            - grey
            - metal
            - olive
            - purple
        pieceSet:
          type: string
          enum:
            - wide_crown
            - wide
            - narrow_edge
            - narrow
            - fabirovsky
            - frisianovsky
            - flat
            - ringed
            - basic
            - eightbit
        soundSet:
          type: string
          enum:
            - silent
            - standard
            - piano
            - nes
            - sfx
            - futuristic
            - robot
            - music
            - speech
        blindfold:
          type: integer
          example: 0
        autoThreefold:
          type: integer
          example: 2
        takeback:
          type: integer
          example: 3
        moretime:
          type: integer
          example: 3
        clockTenths:
          type: integer
          example: 1
        clockBar:
          type: boolean
          example: true
        clockSound:
          type: boolean
          example: true
        premove:
          type: boolean
          example: true
        animation:
          type: integer
          example: 2
        captured:
          type: boolean
          example: true
        kingMoves:
          type: boolean
          example: true
        follow:
          type: boolean
          example: true
        highlight:
          type: boolean
          example: true
        destination:
          type: boolean
          example: true
        coords:
          type: integer
          example: 2
        replay:
          type: integer
          example: 2
        challenge:
          type: integer
          example: 4
        message:
          type: integer
          example: 3
        coordColor:
          type: integer
          example: 2
        submitMove:
          type: integer
          example: 4
        confirmResign:
          type: integer
          example: 1
        insightShare:
          type: integer
          example: 1
        keyboardMove:
          type: integer
          example: 0
        fullCapture:
          type: integer
          example: 0
        zen:
          type: integer
          example: 0
        moveEvent:
          type: integer
          example: 2
        puzzleVariant:
          type: string
          enum:
            - standard
            - frisian
            - russian

    ArenaTournaments:
      type: object
      properties:
        created:
          type: array
          items:
            $ref: '#/components/schemas/ArenaTournament'
        started:
          type: array
          items:
            $ref: '#/components/schemas/ArenaTournament'
        finished:
          type: array
          items:
            $ref: '#/components/schemas/ArenaTournament'

    ArenaTournament:
      example: {
        "id": "QITRjufu",
        "fullName": "SuperBlitz Arena",
        "clock": {
          "increment": 0,
          "limit": 180
        },
        "minutes": 57,
        "createdBy": "lishogi",
        "system": "arena",
        "secondsToStart": 0,
        "secondsToFinish": 36000,
        "isFinished": true,
        "isRecentlyFinished": true,
        "pairingsClosed": true,
        "startsAt": "2018-04-04T01:00:00.000Z",
        "nbPlayers": 154,
        "perf": {
          "icon": ")",
          "key": "blitz",
          "name": "Blitz",
          "position": 1
        },
        "schedule": {
          "freq": "hourly",
          "speed": "superblitz"
        },
        "variant": {
          "key": "standard",
          "name": "Standard",
          "short": "Std"
        },
        "duels": [
          {
            "id": "0MM6q4tQ",
            "p": [
              {
                "n": "player1",
                "r": 1500,
                "k": 3
              },
              {
                "n": "player2",
                "r": 1500,
                "k": 3
              }
            ]
          }
        ],
        "standings": {
          "page": 1,
          "players": [
            {
              "name": "player1",
              "rank": 1,
              "rating": 1500,
              "score": 3,
              "sheet": {
                "scores": [
                {
                  "0": 2,
                  "1": 2,
                },
                {
                  "0": 4,
                  "1": 3,
                },
                0
                ],
                "total": 6,
                "fire": true
              }
            }
          ],
        },
        "featured": {
          "id": "khe72Fer",
          "fen": "W27,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50:B1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,24",
          "color": "black",
          "lastMove": "d7c6",
          "white": {
            "rank": 2,
            "name": "player1",
            "rating": 1360
          },
          "black": {
            "rank": 5,
            "name": "player2",
            "rating": 1431
          }
        },
        "podium": [
          {
            "name": "player1",
            "rank": 1,
            "rating": 1500,
            "score": 3,
            "sheet": {
              "scores": [
              {
                "0": 2,
                "1": 2,
              },
              {
                "0": 4,
                "1": 3,
              },
              0
              ],
              "total": 6,
              "fire": true
            },
            "nb": {
              "game": 3,
              "beserk": 0,
              "win": 2
            },
            "performance": 1787
          }
        ],
        "stats": {
          "games": 454,
          "moves": 27542,
          "whiteWins": 236,
          "blackWins": 207,
          "draws": 11,
          "berserks": 0,
          "averageRating": 1320
        }
      }

    SwissTournament:
      example: {
        "rated": true,
        "clock": {
            "increment": 0,
            "limit": 300
        },
        "createdBy": "thibault",
        "greatPlayer": {
            "name": "Wang",
            "url": "https://wikipedia.org/wiki/Wang_Hao_(chess_player)"
        },
        "id": "ZmKWCOye",
        "name": "Wang",
        "nbOngoing": 0,
        "nbPlayers": 0,
        "nbRounds": 2,
        "nextRound": {
            "at": "2020-05-11T12:23:18.233-06:00",
            "in": 600
        },
        "quote": {
            "author": "Emanuel Lasker",
            "text": "By what right does White, in an absolutely even position, such as after move one, when both sides have advanced 1. e4, sacrifice a pawn, whose recapture is quite uncertain, and open up his kingside to attack? And then follow up this policy by leaving the check of the black queen open? None whatever !"
        },
        "round": 0,
        "startsAt": "2020-05-11T12:23:18.233-06:00",
        "status": "created",
        "variant": "standard"
      }

    Simul:
      example: {
          "fullName": "GMI George simul",
          "host": {
              "id": "george",
              "name": "George",
              "rating": 1500,
              "title": "GMI",
              "online": true
          },
          "id": "pDGbxhUe",
          "isCreated": false,
          "isFinished": true,
          "isRunning": false,
          "name": "GMI George",
          "nbApplicants": 0,
          "nbPairings": 24,
          "text": "",
          "variants": [
              {
                  "icon": "+",
                  "key": "standard",
                  "name": "Standard"
              }
          ],
          "targetPct": 80
      }

    Broadcast:
      example: {
        "description": "An 11 round classical tournament featuring the 9 highest rated players in the world. Including Carlsen, Caruana, Ding, Aronian, Nakamura and more.\r\n\r\nStarts at 18:00 UTC",
        "url": "https://lishogi.org/broadcast/sinquefield-cup-round-10/wje0786Q",
        "id": "wje0786Q",
        "markup": "<p>Starts August 16th at 18:00 UTC</p>\n<table class=\"slist\">\n<thead>\n<tr><th>Player</th><th>Federation</th><th>Rating</th></tr>\n</thead>\n<tbody>\n<tr><td>Carlsen Magnus</td><td>NOR</td><td>2882</td></tr>\n<tr><td>Caruana Fabiano</td><td>USA</td><td>2818</td></tr>\n<tr><td>Ding Liren</td><td>CHN</td><td>2805</td></tr>\n<tr><td>Giri Anish</td><td>NED</td><td>2779</td></tr>\n<tr><td>Vachier-Lagrave Maxime</td><td>FRA</td><td>2778</td></tr>\n<tr><td>So Wesley</td><td>USA</td><td>2776</td></tr>\n<tr><td>Nepomniachtchi Ian</td><td>RUS</td><td>2774</td></tr>\n<tr><td>Aronian Levon</td><td>ARM</td><td>2765</td></tr>\n<tr><td>Mamedyarov Shakhriyar</td><td>AZE</td><td>2764</td></tr>\n<tr><td>Anand Viswanathan</td><td>IND</td><td>2756</td></tr>\n<tr><td>Karjakin Sergey</td><td>RUS</td><td>2750</td></tr>\n<tr><td>Nakamura Hikaru</td><td>USA</td><td>2743</td></tr>\n</tbody>\n</table>\n<p>Streams: <strong><a href=\"google.com\">Saint Louis Chess Club,</a></strong> <strong><a href=\"google.com\">GMI Jon Speelman</a></strong><br />\n<strong><a href=\"google.com\">Follow the Lishogi Youtube for round reports</a></strong></p>\n",
        "name": "Sinquefield Cup - Round 10",
        "ownerId": "broadcaster",
        "startedAt": 1566928867494,
        "startsAt": 1566928800000,
        "sync": {
            "log": [],
            "ongoing": false,
            "url": "http://0.0.0.0/sinquefield2019/10/games.pdn"
        }
      }

    Team:
      type: object
      properties:
        id:
          type: string
          example: coders
        name:
          type: string
          example: Coders
        description:
          type: string
          example: "There are 10 kinds of people in the world: those who understand binary, and the others.\r\n\r\nIf you want to join the team, prove (briefly) that you can code in the request message!"
        open:
          type: boolean
          example: false
        leader:
          $ref: '#/components/schemas/LightUser'
        nbMembers:
          type: integer
          example: 3129

    TeamPaginatorJson:
      type: object
      properties:
        currentPage:
          type: number
          example: 4
        maxPerPage:
          type: number
          example: 15
        currentPageResults:
          type: array
          items:
            $ref: '#/components/schemas/Team'
        nbResults:
          type: number
          example: 205194
        previousPage:
          type: [number, 'null']
          example: 3
        nextPage:
          type: [number, 'null']
          example: 5
        nbPages:
          type: number
          example: 13680

    BotGameState:
      type: object
      properties:
        state:
          type: object
          properties:
            moves:
              type: string
              description: Current moves
            wtime:
              type: integer
              description: Integer of milliseconds White has left on the clock
            btime:
              type: integer
              description: Integer of milliseconds Black has left on the clock
            winc:
              type: integer
              description: Integer of White Fisher increment.
            binc:
              type: integer
              description: Integer of Black Fisher increment.
            status:
              type: string
              description: Game status code.
            winner:
              type: string
              description: Color of the winner, if any
      example: [
        {
          "type": "gameFull",
          "id": "5IrD6Gzz",
          "rated": true,
          "variant": {
            "key": "standard",
            "name": "Standard",
            "short": "Std"
          },
          "clock": {
            "initial": 1200000,
            "increment": 10000
          },
          "speed": "classical",
          "perf": {
            "name": "Classical"
          },
          "createdAt": 1523825103562,
          "white": {
            "id": "george",
            "name": "George",
            "provisional": false,
            "rating": 2500,
            "title": "MI"
          },
          "black": {
            "id": "player1",
            "name": "Player1",
            "rating": 2390,
            "title": null
          },
          "initialFen": "startpos",
          "state": {
            "type": "gameState",
            "moves": "3227 1722 3832 1924 4338 2430 3425",
            "wtime": 7598040,
            "btime": 8395220,
            "winc": 10000,
            "binc": 10000,
            "status": "started"
          }
        },
        {
          "type": "gameState",
          "moves": "3227 1722 3832 1924 4338 2430",
          "wtime": 7598040,
          "btime": 8395220,
          "winc": 10000,
          "binc": 10000,
          "status": "started"
        },
        {
          "type": "chatLine",
          "username": "George",
          "text": "Good luck, have fun",
          "room": "player"
        },
        {
          "type": "chatLine",
          "username": "Player2",
          "text": "!eval",
          "room": "spectator"
        },
        {
          "type": "gameState",
          "moves": "3227 1722 3832 1924 4338",
          "wtime": 7598040,
          "btime": 8395220,
          "winc": 10000,
          "binc": 10000,
          "status": "resign",
          "winner": "black"
        }
      ]

    StreamEvents:
      example: |
        {"type":"challenge","challenge":{"id":"7pGLxJ4F","status":"created","challenger":{"id":"george","name":"George","title":"MI","rating":2506,"patron":true,"online":true,"lag":24},"destUser":{"id":"thibot","name":"thibot","title":null,"rating":1500,"provisional":true,"online":true,"lag":45},"variant":{"key":"standard","name":"Standard","short":"Std"},"rated":true,"timeControl":{"type":"clock","limit":300,"increment":25,"show":"5+25"},"color":"random","perf":{"icon":"#","name":"Rapid"}}}
        {"type":"gameStart","game":{"id":"1lsvP62l"}}

    Ok:
      properties:
        ok:
          type: boolean
      example:
        ok: true

    Error:
      properties:
        error:
          type: string
          description: The cause of the error.
      example:
        error: "This request is invalid because [...]"

    NotFound:
      properties:
        error:
          type: string
      example:
        error: "Not found."

  securitySchemes:
    OAuth2:
      type: oauth2
      description: "### Authorization Code Flow\n\
        \ The authorization code flow allows your users to **login with lishogi**.\n\
        \ - [NodeJS example](https://github.com/lishogi-org/api/tree/master/example/oauth-authorization-code)\n\
        \ - [Create a Lishogi OAuth app](https://lishogi.org/account/oauth/app)\n\
        \ - [About authorization code flow](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2#grant-type-authorization-code)\n\
        \n### Personal API Token\n\
        \ Personal API tokens allow you to quickly interact with Lishogi OAuth API.\n\
        \ - `curl https://lishogi.org/api/account -H \"Authorization: Bearer <token>\"`\n\
        \ - [NodeJS example](https://github.com/lishogi-org/api/tree/master/example/oauth-personal-token)\n\
        \ - [Generate a personal API token](https://lishogi.org/account/oauth/token)"
      flows:
        authorizationCode:
          authorizationUrl: https://oauth.lishogi.org/oauth/authorize
          tokenUrl: https://oauth.lishogi.org/oauth
          scopes:
            "preference:read": Read your preferences
            "preference:write": Write your preferences
            "email:read": Read your email address
            "challenge:read": Read incoming challenges
            "challenge:write": Create, accept, decline challenges
            "tournament:write": Create tournaments
            "puzzle:read": Read puzzle activity
            "team:write": Join, leave, and manage teams
            "bot:play": Play with the Bot API. Only for [Bot accounts](#operation/botAccountUpgrade)
    SameOrigin:
      description: "CORS is supported on almost all endpoints, except those tagged `SameOrigin`."
      type: none
    None:
      description: "No authorization required.\n\
        \ For requests that don't need an authenticated user."
      type: none
